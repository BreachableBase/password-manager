{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\f0\fs40\lang9\par
\par

\pard\sa200\sl240\slmult1\qc NON-EXAM ASSESSMENT\par
\fs20 SECTIONS 0-7\par

\pard\sa200\sl240\slmult1\qj\par

\pard\sa200\sl240\slmult1\qc\par
\par
SECTION 0:                                                                                                                  INTRODUCTION\par
\i an abstract section, highlighting the purpose of this NEA write-up                                                      and the purpose of my project.\par
\par
\par
\par

\pard\sa200\sl240\slmult1\qj\i0\fs28 The aim of this NEA (Non-exam assessment) is to document a password manager project, written in python. This NEA will seek to address and highlight the challenges that I faced during the development of this project.\par
\par
With the increasing number of online accounts, the insecurity of storing passwords locally, and the corresponding need for authentication security, this project aims to mitigate these issues, and more. This will be achieved by storing user's passwords in a centralised, secure & privacy respecting authentication manager.\par
\par

\pard 
{\pntext\f0 I.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnucrm{\pntxta.}}
\fi-360\li720\sa200\sl240\slmult1\qj Centralisation\par

\pard\sa200\sl240\slmult1\qj\tab The centralisation aspect of my password manager offers \tab convenience to all users. By storing passwords in a singular,\tab secure location, users can easily access their accounts without the \tab need to remember multiple passwords from multiple platforms. \tab This, in itself is a security measure, by simplifying authentication \tab management, we can ensure our clients reduce the risk of \tab forgetting passwords, or reusing weaker ones.\par
    II.  Security\par
\tab 'But won't centralisation \i reduce \i0 security?' in most cases, yes. \tab However my password manager will employ end-to-end \tab encryption using the Rivest-Shamir-Adleman algorithm \tab (RSA-2048) for the storage of public and private keys on the \tab database, and the Advanced-Encryption-Standard (AES-128) on \tab the client-side. Therefore, in the event of a data-breach or \tab unauthenticated access to the database, the encryption keys \tab remain secure and \tab inaccessable to malicious users.\par
\tab (process of encryption idea? : generate RSA key-pair client side, have the user use AES on their plaintext password, use the public-key to encrypt the AES cyphertext to be sent to the server. **DOUBLE CHECK WITH T**\par
   III.  Privacy \par
\tab The usage of randomly generated userIDs enhances privacy, each \tab user will be provided with a unique identifier that cannot be linked \tab back to any personally identifiable information (PII), further \tab mitigating the risk of PII breaches, granting a certain level of \tab anonymity.\par
\par
\tab (run through tor network maybe? open SSH-tun with auth for userID to minimise MITM???)\par
\par
\par
\par

\pard\sa200\sl240\slmult1\qc\fs20  SECTION 1:                                                                                                                                         THEORETICAL PLAN-OF-ACTION\par
    \i documentation of my thought process & planning ahead                                                                      for potential setbacks, security risks, ethical & legal violations, & pratical implementation.\i0                                                                                                                        \fs28\par

\pard\sa200\sl240\slmult1\qj\par
\par
\par
In this section, I will highlight the general steps of my current working theory, which will be explained in informative paragraphs which will include small code blocks.\par
\par
My theory of encryption for client-side & server-side is as follows, disregarding other requirements, this section is purely about the thought process.\par
\par

\pard 
{\pntext\f0 I.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnucrm{\pntxta.}}
\fi-360\li720\sa200\sl240\slmult1\qj Client-side encryption\par

\pard\sa200\sl240\slmult1\qj\tab On the client-side, users will use Advanced Encryption Standard \tab (AES) to encrypt their plaintext password. There will be no data   \tab exchange to the server at this point, & the user will remain in \tab control of their AES key in it's entirety.\par
\sub\tab ====CODEBLOCK START====\par

\pard\li720\sa200\sl240\slmult1\qj def aes_encrypt(plaintext, key):\par
    iv = get_random_bytes(AES.block_size)\par
    cipher = AES.new(key, AES.MODE_CBC, iv)\par
    padded_plaintext= pad_plaintext(plaintext, AES.block_size)\par
    ciphertext = cipher.encrypt(padded_plaintext)\par
    return(key, ciphertext, iv)\nosupersub\par

\pard\sa200\sl240\slmult1\qj\sub\tab ====CODEBLOCK      END====\par
\nosupersub\tab The client-side application will also introduce padding, which is \tab crucial for preventing data interception, or Man-In-The-Middle \tab (MITM) attacks. In abstract : padding is a technique to add \tab 'random' bytes to \tab the plaintext, obfuscating the length & structure \tab of the ciphertext.\super [1]\nosupersub\par
\tab Here, I have made an attempt to randomize my padding bytes on \tab line 3.\par
\sub\tab ====CODEBLOCK START====\par

\pard\li720\sa200\sl240\slmult1\qj def pad_plaintext(plaintext, block_size): \par
    global padding\par
    rand_bytes= 16*random.randint(0,7)\par
    padding_bytes = block_size - len(plaintext) % AES.block_size + rand_bytes\par
    padding=bytes([padding_bytes])*padding_bytes\par
    return plaintext + padding\par

\pard\sa200\sl240\slmult1\qj\tab ====CODEBLOCK      END====\par
\nosupersub      II. Server-side encryption\par
\tab Once encrypted at application level using AES, the client will be \tab sent a generated RSA public-key from the server to encrypt their \tab AES ciphertext. Once complete. the encrypted AES-RSA \tab ciphertext is sent to the server for centralisation & secure storage.\par
\tab This ensures end-to-end & secure encryption for users, as the \tab server administrators will not have access to the AES key, and in \tab the event of an attack on the databsase, malicious users will not \tab have access to the \tab plaintext.\par
\sub\tab ====CODEBLOCK START====\nosupersub\par
\tab <...\par
\tab ...>\par
\sub\tab ====CODEBLOCK      END====\par
\par

\pard 
{\pntext\f0 I.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnucrm{\pntxta.}}
\fi-360\li720\sa200\sl240\slmult1\qj\nosupersub Client-side decryption\par

\pard\sa200\sl240\slmult1\qj\tab This function takes the aes_encrypt() output as positional \tab arguments, therefore using the same key & initialization vector.\super [2]\nosupersub\par
\sub\tab ====CODEBLOCK START====\nosupersub\par

\pard\li720\sa200\sl240\slmult1\qj\sub def aes_decrypt(ukey, ciphertext, uiv):\par
    cipher = AES.new(ukey, AES.MODE_CBC, uiv)\par
    plaintext = cipher.decrypt(ciphertext)\par
    return plaintext\nosupersub\par

\pard\sa200\sl240\slmult1\qj\sub\tab ====CODEBLOCK      END====\par
\tab\nosupersub Once I have the encoded plaintext, I need to remove the padding \tab for formatting purposes.\par
\tab I had issues with removing specific values due to the fact I haven't \tab worked with bytes before, in the end I just took the len(padding) & \tab used it as a negative index.\super [2]\nosupersub\par
\sub\tab ====CODEBLOCK START====\nosupersub\par

\pard\li720\sa200\sl240\slmult1\qj\sub def unpad_plaintext(padded_plaintext):\par
    unpadded_plantext = padded_plaintext[:-len(padding)].decode()\par
    return unpadded_plantext\par

\pard\sa200\sl240\slmult1\qj\tab ====CODEBLOCK      END====\par

\pard\li720\sa200\sl240\slmult1\qj\par

\pard\sa200\sl240\slmult1\qj\par
\par
\nosupersub\par
\par
\par
============CODE SNIPPETS START===============\par
for clarification, i will only be including 'WORKING' functions in my document to show progress.\par
----------------------------------------------------------------------------\par
\b version 1 of generate_user :\par
\b0 """\par
FIX OCCASIONAL DASH ISSUE 24-25 (if 2 duplicate values are in the userID, i will get output like this :\par
\par
/bin/python /home/kali/vsc/libtesting/aes_algorithm.py\par
victorvictormike-victor\par
      ^^^^\par
"""\par
\par
def generate_user():\par
    userid=[]\par
    struserid=''\par
    for itr in range(4):\par
        index = random.randint(0,len(wordlist)-1)\par
        userid.append(wordlist[index])\par
    for itr in userid:\par
        if userid[3] == itr:\par
            struserid+=itr\par
        else:\par
            struserid+=itr+'-'\par
    print(struserid)\par
\b version 2 of generate_user :\par
\b0\par
def generate_user():\par
    selected_wordlists=[]\par
    for itr in range(4):\par
        index = random.randint(0,len(wordlist)-1)\par
        selected_wordlists.append(wordlist[index])\par
    user_id = '-'.join(selected_wordlists)\par
    return user_id\par
\b version 3 of generate_user :\par
\b0 implement a way to mitigate duplicate IDs, unlikely, but may happen.\par
\par
================CODE SNIPPETS END===============\par
\par
\par
\par
\par
\par
 bytes.translate(table, /, delete=b'')\par
bytearray.translate(table, /, delete=b'')\par
\par
    Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument delete are removed, and the remaining bytes have been mapped through the given translation table, which must be a bytes object of length 256.\par
\par
    You can use the bytes.maketrans() method to create a translation table.\par
\par
    Set the table argument to None for translations that only delete characters:\par
\par
>>>b'read this short text'.translate(None, b'aeiou')\par
>>>b'rd ths shrt txt'\par
\par
\par
\par
I need to access 'padding'... can't return bytes in a tuple, could do a list but then I can't concatenate index 0,1.\par
\par
\par
user_plaintext = b'password'\par
def pad_plaintext(plaintext, block_size): \par
    padding_bytes = block_size - len(plaintext) % AES.block_size\par
    padding=bytes([padding_bytes])*padding_bytes # randomize this for security\par
    #print(padding_bytes)\par
    #print(padding) # this is what needs to be removed in function unpad_plaintext\par
    return plaintext + padding#, padding_bytes #BRUH. CANNOT RETURN MUTLIPLE BYTES IN A TUPLE. FIND WORKAROUND LATER\par
\par
I first attempted to use the value of padding_bytes to splice in my unpad function\par
didn't work because it's bytes\par
\par
Then found data.translate(x,y) and used the output of pad_plaintext like so:\par
\par
input_bytes.translate(None,pad_plaintext(user_plaintext, AES.block_size)\par
\par
in the end i just set padding to global, never used global variables before.\par
===========\par
\par
\par
def unpad_plaintext(padded_plaintext):\par
    unpadded_plantext = padded_plaintext.translate(None,padding)\par
    return unpad_plaintext\par
\par
just realised that this is not good. if the padding contains an 'o' and the plaintext contains an 'o', the plaintext will also be manipulated. i need to use splice as a positional based on the length of the plaintext or padding.\par
\par
updated :\par
\par
def unpad_plaintext(padded_plaintext):\par
    unpadded_plantext = padded_plaintext[:-len(padding)].decode()\par
    return unpadded_plantext\par
\par
\par
\par
\par

\pard\sa200\sl240\slmult1\qc\fs20  SECTION 7:                                                                                                                                         REFERENCES\par
\i documentation of sources used for educational purposes.\par
\par
\par
\par

\pard\sa200\sl240\slmult1\i0\fs28\par
\b [1] The AES-CBC Cipher Algorithm and Its Use with IPsec\par

\pard\sa200\sl240\slmult1\qj\b0 Frankel, S. Glenn, R. & Kelly, S. (2003). "The AES-CBC Cipher Algorithm and Its Use with IPsec." RFC 3602. Retrieved from {{\field{\*\fldinst{HYPERLINK https://www.rfc-editor.org/rfc/rfc3602 }}{\fldrslt{https://www.rfc-editor.org/rfc/rfc3602\ul0\cf0}}}}\f0\fs28\par
\par
\b [2] Python documentation\par
\b0 Python Software Foundation. (2021). Python documentation. Retrieved from {{\field{\*\fldinst{HYPERLINK https://docs.python.org }}{\fldrslt{https://docs.python.org\ul0\cf0}}}}\f0\fs28\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par

\pard\sa200\sl240\slmult1\qc\par

\pard\sa200\sl276\slmult1\qc\f1\fs40\par
}
 